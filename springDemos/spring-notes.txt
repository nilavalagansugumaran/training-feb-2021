Spring Boot Microservices
========================

What is spring boot? and what is the purpose and benefits?
	
		java framework 
		written in java
		boiler plate code - removes 
		within minutes - production ready application 
		simplify development process

		Pivotal - VMWARE

		2002
		2014 - spring boot 

		spring.io 
			contains a lot projects
			use the projects based on your requirements

Features 
	1) auto-configuration
	2) standalone
	3) openionated view 



Quickly create springboot application

	Spring initializer - https://start.spring.io/

	./mvnw spring-boot:run - to run spring boot
	./mvnw package - to build jar

Common application properties - https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
Document reference - https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/

===========
Beans & Configurations

	- What are breans?
		- Object created and managed by Spring 
		- Stored in Spring containers

	- How are they getting created?
		- Application start, spring look for special annotation and start creating objects and add to containers
			RestController
			Component
			Service
			Repository
			Configuration
			...
	- How are they managed?
		- Spring containers
		- beans has Scope 
			- singleton  - same object every time
			- prototype - new object created every time
			- request - new object created for every request
			- session - new object created for every user sesions
			- websocket - each socket connection

	- How to access them?
		- from Spring containers - using ApplicationContext
		- @Autowired annotation 
			- dependency injection
			- @Qualifier - TO CHOOSE from multiple beans
		- @Lazy
		- can inject values from properties file 
			- using @Value

	- component scanning
		- default looks at current package and sub packages
		- to include outerpackage - need to specify



Create spring project (dont choose any dependency) - java application
	
	- Interface 
		BankRepository
			updateTable() - definition 
		BankService
			takeDeposit() - definition 

	- BankServiceImpl 
		BankRepository repository; //dependency

		takeDeposit() -sout(taking deposit)


	- BankRespisitoryImp (development)
		updateTable()	-sout(updating table)


	- BankProdRespisitoryImp (production) implements BankRepository
		updateTable()	-sout(updating prod table)


How to read application arguments??
	- use ApplicationArguments

		- option argument
			key & value
			target=windows,linux,macos
			--<key>=<value>
			--<key>=<value>
			--<key>=<value>

		- non-option arguments (no key & values - only values)
			name
			value


Configuration class??

	- configure own beans
		- "new" keyword appearing 

			create classes -  MyBean & MyOtherBean


================
Additional techniques

	configuration files
		/config
			<.properties>

		/ <.properties>

		/config classpath 
			<.properties>

		/classpath root
			<.properties>

	Two way you can create properties files
		application.properties
		application.yml

===================
Autoconfiguration

	- key feature in spring boot
	- Normal configuration classes
		@Beans
		Conditions 

	- create a standalone (no dependencies) dont add componenet or service
	
		create a interface MyInterface()

		Create class MyClass1 implements MyInterface()

		Create class MyClass2 implements MyInterface()

		create a configuration class MyAppConfig (annotate with @Configuration)
			create bean for MyClass1 & MyClass2

====================

Microservices

	- Traditional application

REST SERVICES

	Representation of state transfer

	- What are the parties involved?
		Client -
			you, me, web browsers, another application, mobile app

		What client wants?	
			- resources (can be anything)

		Service - 
			- who provides or stores or know how can retrive the resource

		representation - 
			jpeg, video, XML, json 

	- how do they communicate? Transfers?
		 
			HTTP - language 

			request
				resource identifier or name (URL or Endpoint)
				representation - json, xml, jpeg, pdf 
					(accept header or content-type)

			response
				resource state, status, representation or error message
					- success (200 or 201 or 202)
					- not found (404)
					- service unavailable(500)
					- unauthorised (403)
					- unsupported media type (415)

			what client can do with the resource
				- create - POST (http verbs)
				- read  - GET
				- update - PUT/PATCH
				- delete - DELETE 

	- What is a rest service?
		- exposes endpoint/resources for the clients to use by following rest principals

		
Example

	Employee (Resource) 
		java object
			id
			name
			salary 

	EmployeeController 
		/employee

			GET /employee http://localhost:9001/employee

			POST /employee
			DELETE /employee
			PUT /employee

	EmployeeService Interface
		create()
		delete()
		update()
		read()

	EmployeeServiceImpl
		create mockDB (to store emeployee data)


===========

REST CLient
	- to talk to another rest service (9001)
	- HTTP (Web)

	EmployeeClient (ms)

		@RestController
		ClientController 
			DI - ClientService

			GET (/callService)

		@Service
		ClientService

		server.port=9002


How do we call other service?
- RestTemplate  (client API)
	advanced - Feign, Hystrix, HTTP
- need to know where the service is? 
	read from property file
	Service URL - http://localhost:9001/employee

- need to build the requests
	request body, set headers, and call service

- need to process the response
	print the response


=================

Data access

	code 
		create connection
		prepare statement
		execute query
		process results
		close connection 


	Lombok
	Web
	SQL -> Spring Data JDBC (extra)


	EmployeeReposiory Interface
		create()
		delete()
		update()
		read()

	EmployeeReposioryImpl
		Going to talk to real db

	start serive in port 9003






















======================


spring.datasource.url: jdbc:h2:mem:example
spring.datasource.username: sa
spring.datasource.password:
spring.jpa.database-platform: org.hibernate.dialect.H2Dialect

# Enabling H2 Console
spring.h2.console.enabled: true

logging.level.com.example: DEBUG

#JPA related configuration
spring.jpa.hibernate.ddl-auto: create-drop
spring.jpa.properties.hibernate.show_sql: true
spring.jpa.properties.hibernate.use_sql_comments: true
spring.jpa.properties.hibernate.format_sql: true


To connect to postgress -

    - install brew if not in your machine
    - install postgress using brew or update if required
        brew install postgresql
    - To connect to postgress locally
        psql -h localhost -p 5432 -d postgres
    - Create application DB, user etc
        CREATE USER nila PASSWORD 'nilapassword' CREATEDB CREATEROLE SUPERUSER;
        CREATE DATABASE mydb;
        GRANT ALL PRIVILEGES ON DATABASE mydb TO nila;
        \c mydb;

    - Update your project to include postgres driver and dependency. Ensure removing/commenting H2 DB dependency
        pom.xml
            		<dependency>
            			<groupId>org.postgresql</groupId>
            			<artifactId>postgresql</artifactId>
            		</dependency>


    - Update your application.yml, ensure H2 related configuration are removed
        spring.datasource.url: jdbc:postgresql://localhost:5432/mydb
        spring.datasource.username: nila
        spring.datasource.password: nilapassword
        spring.jpa.database-platform: org.hibernate.dialect.PostgreSQLDialect # The SQL dialect makes Hibernate generate better SQL for the chosen database

    - Stop and start your application - YOU ARE READY TO CONNECT TO postgres DB


<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
</dependency>

server.error.include-message - ResponseStatusException

 String sql = "SELECT * FROM EMPLOYEES where EMPLOYEEID = ?";
 Employee e =  jdbcTemplate.queryForObject(sql,  new Object[]{id}, new EmployeeRowMapper());


        //DDL statements
        jdbcTemplate.execute("create table EMPLOYEES(" +
                "employeeid int auto_increment, " +
                "name varchar(50), " +
                "salary double, " +
                "primary key (employeeid) )");

        // DML statement
        jdbcTemplate.update("insert into EMPLOYEES (name, salary) " +
                        "values (?, ?)",
                new Object[]{"James-1", 21000});

        jdbcTemplate.update("insert into EMPLOYEES (name, salary) " +
                        "values (?, ?)",
                new Object[]{"James-2", 22000 });

        jdbcTemplate.update("insert into EMPLOYEES (name, salary) " +
                        "values (?, ?)",
                new Object[]{"James-3", 23000});























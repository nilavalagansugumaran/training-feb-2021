

Write once and run anyware 

Source code - Written in English
	.java [Extension]

Java compiler - Coverts the source to a byte code 

javac - to invoke java compiler
	.class [Extension]

Java interpreter - runs your java application, byte code to machine language (0 & 1)
	
java - to inkoe java interpreter and run your application 

JVM - java virtual machine 


JAR - Java Archive
	- put all java files and resources together 
		- Create java files
		- Compile java files to class files
			javac *.java
		- Create a entry point file (manifest.txt)
		- Create JAR file
			jar cfm MyTest.jar manifest.txt *.class
		- Run the jar file
			java -jar MyTest.jar
		- to view what it in jar file
			jar tvf MyTest.jar 

WAR - Web Archive
EAR - Enterprise Archive


IntelliJ
	
identifier

keyword

class definition

main method

Access modifier (Affects who can see/access the elements (class, method, variable))
	- public, private, protected, default

non-access modifier
	- static, final, strictfp

package

import

primitive (8) & reference types 

java doc

String, Scanner, Math

all 8 premitives has wrapper classes
	int == Integer (wrapper)
	double == Double (wrapper)

operators & flow control
	unary 
	conditional
	bitwise && or & operation
	implisit conversions 

===============


What is a class?
	
	Template/blueprint to represent real world entity
	Definition 
	Classloader loads all class to memory 

	What do you have in the class?
		- Attribute/properties/instance variables/members

		- behavious/methods

What is an object? How to create an object?
	
	new - keyword
	- sets attributes/ set values to instance variables
	- stored in heap memory
	- returns address(location where object is stored in the memory)
	- grabage collector - scans heap memory
					- finds unused objects

Abstraction & Encaptulation


Access modifiers
	- private, public, default, protected
	- static, final, strictfp, synchronised

this - keyword refers to current object

constructor - no return type
has to be same name as the class

overloading - same method name and return type but differrent parameters


initialisation block
static initialisation block


























